<?php

namespace common\models;

use tests\codeception\common\fixtures\EmployeeBusinessProfileFixture;
use tests\codeception\common\fixtures\EmployeeFixture;
use tests\codeception\common\fixtures\EmployeeRoleFixture;


/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-20 at 12:44:53.
 */
class EmployeeTest extends \tests\codeception\common\unit\DbTestCase
{
    
    /**
     * @inheritdoc
     */
    public function fixtures()
    {
        return [
            'businessProfiles' => [
                'class' => EmployeeBusinessProfileFixture::className(),
            ],
            'employee' => [
                'class' => EmployeeFixture::className(),
            ],
            'employee_role' => [
                'class' => EmployeeRoleFixture::className(),
            ],
        ];
    }

    /**
     * @var Employee
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new Employee;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }


    /**
     * @covers common\models\Employee::getLocationName
     */
    public function testGetLocationName()
    {
        $this->assertNotNull($employee = Employee::findOne(1));
        $this->assertEquals('Poland/Lublin', $employee->locationName);
    }

    /**
     * @covers common\models\Employee::getFullname
     */
    public function testGetFullname()
    {
        $employee = Employee::findOne(1);
        $this->assertEquals('user1 AABBCC',$employee->fullName);
    }

    /**
     * @covers common\models\Employee::isAdministrator
     */
    public function testIsAdministrator()
    {
        $employee = Employee::findOne(1);
        $this->assertTrue($employee->isAdministrator());
        $employee = Employee::findOne(2);
        $this->assertFalse($employee->isAdministrator());
    }

    /**
     * @covers common\models\Employee::getPrimaryBusinessProfile
     */
    public function testGetPrimaryBusinessProfile()
    {
        $this->assertNotNull($employee = Employee::findOne(1));
        $this->assertEquals('BPROFILE1', $employee->getPrimaryBusinessProfile());

        $this->assertNotNull($employee = Employee::findOne(3));
        $this->assertNull($employee->getPrimaryBusinessProfile());
    }

    /**
     * @covers common\models\Employee::getSecondaryBusinessProfiles
     */
    public function testGetSecondaryBusinessProfiles()
    {
        $this->assertNotNull($employee = Employee::findOne(1));
        $this->assertEquals('BPROFILE2,BPROFILE3,', $employee->getSecondaryBusinessProfiles());

        $this->assertNotNull($employee = Employee::findOne(3));
        $this->assertNull($employee->getSecondaryBusinessProfiles());
    }
}