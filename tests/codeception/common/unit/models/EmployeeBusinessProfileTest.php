<?php

namespace common\models;

use tests\codeception\common\fixtures\EmployeeBusinessProfileFixture;
use tests\codeception\common\unit\DbTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-19 at 10:47:17.
 */
class EmployeeBusinessProfileTest extends DbTestCase
{
    /* @var BusinessProfileSearch */
    protected $object;

    /**
     * @inheritdoc
     */
    public function fixtures()
    {
        return [
            'user' => [
                'class' => EmployeeBusinessProfileFixture::className(),
            ],
        ];
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }


    /**
     * @covers common\models\EmployeeBusinessProfile::moveDown()
     */
    public function testMoveDown()
    {
        $profile = EmployeeBusinessProfile::findOne(1);
        $this->assertEquals(1, $profile->id);
        $this->assertEquals(1, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(1, $profile->profile_order);

        $this->assertTrue($profile->moveDown());

        $profile = EmployeeBusinessProfile::findOne(1);
        $this->assertEquals(1, $profile->id);
        $this->assertEquals(1, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(2, $profile->profile_order);

        $this->assertTrue($profile->moveDown());

        $profile = EmployeeBusinessProfile::findOne(1);
        $this->assertEquals(1, $profile->id);
        $this->assertEquals(1, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(3, $profile->profile_order);

        $this->assertTrue($profile->moveDown());

        $profile = EmployeeBusinessProfile::findOne(1);
        $this->assertEquals(1, $profile->id);
        $this->assertEquals(1, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(3, $profile->profile_order);
    }

    /**
     * @covers common\models\EmployeeBusinessProfile::moveDown()
     */
    public function testMoveUp()
    {
        $profile = EmployeeBusinessProfile::findOne(3);
        $this->assertEquals(3, $profile->id);
        $this->assertEquals(3, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(3, $profile->profile_order);

        $this->assertTrue($profile->moveUp());

        $profile = EmployeeBusinessProfile::findOne(3);
        $this->assertEquals(3, $profile->id);
        $this->assertEquals(3, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(2, $profile->profile_order);

        $this->assertTrue($profile->moveUp());

        $profile = EmployeeBusinessProfile::findOne(3);
        $this->assertEquals(3, $profile->id);
        $this->assertEquals(3, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(1, $profile->profile_order);

        $this->assertTrue($profile->moveUp());

        $profile = EmployeeBusinessProfile::findOne(3);
        $this->assertEquals(3, $profile->id);
        $this->assertEquals(3, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(1, $profile->profile_order);
    }

    /**
     * @covers common\models\EmployeeBusinessProfile::deleteProfile()
     */
    public function testDeleteProfile()
    {
        $profile = EmployeeBusinessProfile::findOne(2);
        $this->assertTrue($profile->deleteProfile());
        $all = EmployeeBusinessProfile::find()->andWhere(['employee_id'=>1])->orderBy('profile_order')->all();
        $this->assertCount(2, $all);
        $profile = $all[0];
        $this->assertEquals(1, $profile->id);
        $this->assertEquals(1, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(1, $profile->profile_order);
        $profile = $all[1];
        $this->assertEquals(3, $profile->id);
        $this->assertEquals(3, $profile->business_profile_id);
        $this->assertEquals(1, $profile->employee_id);
        $this->assertEquals(2, $profile->profile_order);

    }
}