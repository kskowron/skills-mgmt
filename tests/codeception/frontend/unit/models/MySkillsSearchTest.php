<?php

namespace frontend\models;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-03-05 at 09:28:01.
 */
class MySkillsSearchTest extends \tests\codeception\frontend\unit\DbTestCase
{
    /**
     * @var MySkillsSearch
     */
    protected $object;

    public function fixtures()
    {
        return ['employee' => [
                'class' => \tests\codeception\common\fixtures\EmployeeFixture::className(),
            ],
            'skill' => [
                'class' => \tests\codeception\common\fixtures\SkillFixture::className(),
            ],
            'employee_skill' => [
                'class' => \tests\codeception\common\fixtures\EmployeeSkillFixture::className(),
            ],
            'category' => [
                'class' => \tests\codeception\common\fixtures\CategoryFixture::className(),
            ],
        ];
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->object = new MySkillsSearch;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
     * @covers frontend\models\MySkillsSearch::updateMySkill
     */
    public function testUpdateMySkill()
    {

        $model = MySkillsSearch::findOne(1);
        $this->assertEquals(1, $model->employee_id);
        $this->assertEquals(1, $model->skill_level_id);

        $model->skill_level_id = 2;
        $this->assertFalse($model->updateMySkill());

        $model->employee_ids = 1;
        $this->assertTrue($model->updateMySkill());

        $skill = \common\models\base\EmployeeSkill::findOne(1);
        $this->assertEquals(2, $skill->skill_level_id);

        $model = MySkillsSearch::findOne(1);
        $this->assertEquals(1, $model->employee_id);
        $this->assertEquals(1.0, $model->years_of_experience);

        $model->years_of_experience = 2.0;
        $this->assertFalse($model->updateMySkill());

        $model->employee_ids = 1;
        $this->assertTrue($model->updateMySkill());

        $skill = \common\models\base\EmployeeSkill::findOne(1);
        $this->assertEquals(2.0, $skill->years_of_experience);


        $model = MySkillsSearch::findOne(1);
        $this->assertEquals(1, $model->employee_id);
        $this->assertEquals(2015, $model->last_activity);

        $model->last_activity = 2014;
        $this->assertFalse($model->updateMySkill());

        $model->employee_ids = 1;
        $this->assertTrue($model->updateMySkill());

        $skill = \common\models\base\EmployeeSkill::findOne(1);
        $this->assertEquals(2014, $skill->last_activity);

    }

    /**
     * @covers frontend\models\MySkillsSearch::deleteSkill
     * @todo   Implement testDeleteSkill().
     */
    public function testDeleteSkill()
    {
        $model = MySkillsSearch::findOne(1);
        $this->assertEquals(1, $model->employee_id);
        $this->assertEquals(1, $model->skill_level_id);

        $this->assertFalse($model->deleteSkill());

        $model->employee_ids = 1;
        $this->assertTrue($model->deleteSkill());

        $skill = \common\models\base\EmployeeSkill::findOne(1);
        $this->assertNull($skill);
    }

    /**
     * @covers frontend\models\MySkillsSearch::addNewSkill
     */
    public function testAddNewSkill()
    {
        $skill = new \common\models\EmployeeSkill();
        $skill->employee_id = 5;
        $skill->skill_id = 1;
        $skill->last_activity = 2014;
        $skill->years_of_experience = 1;
        $skill->skill_level_id = 2;


        $searchModel = new MySkillsSearch();
        $this->assertFalse($searchModel->addNewSkill($skill));

        $searchModel->employee_ids = 5;
        $this->assertTrue($searchModel->addNewSkill($skill));

        $skill = \common\models\EmployeeSkill::findOne(['employee_id'=>5, 'skill_id'=>1]);
        $this->assertEquals(2014,$skill->last_activity);
    }

    /**
     * @covers frontend\models\MySkillsSearch::save
     */
    public function testSave()
    {
        $model = MySkillsSearch::findOne(1);
        $this->assertFalse($model->save());
    }
}